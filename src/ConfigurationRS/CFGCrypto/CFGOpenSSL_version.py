import sys
import os

def main() :

  print("****************************************")
  print("*")
  print("* Auto generate CFG OpenSSL version")
  print("*")
  assert len(sys.argv) >= 3, "CFGOpenSSL_version.py need output auto.h and openssl-version arguments"
  print("*    Output H:        %s" % sys.argv[1])
  print("*    OpenSSL Version: %s" % sys.argv[2])
  print("*")
  print("****************************************")

  if len(sys.argv) == 4 :
    print("Debug all openssl header")
    os.system("ls %s/openssl/*" % sys.argv[3])

  # For now support three major version: 1.1.1, 3.0.x, 3.1.x
  version = sys.argv[2]
  assert version.find("1.1.1") == 0 or version.find("3.0.") == 0 or version.find("3.1.") == 0
  versions = version.split(".")
  assert len(versions) >= 3
  versions = versions[:3]
  versions[2] = versions[2][0]
  for i in range(len(versions)) :
    versions[i] = int(versions[i])
  detail_version = versions[0] << 24 | versions[1] << 16 | versions[2] << 8;
  file = open(sys.argv[1], "w")
  file.write("#ifndef CFGOpenSSL_VERSION_AUTO\n")
  file.write("#define CFGOpenSSL_VERSION_AUTO\n\n")
  file.write("\n/*\n")
  file.write("    This file is auto-generated by ConfigurationRS/CFGCrypto/CFGOpenSSL_version.py\n")
  file.write("*/\n\n")
  file.write("#define CFGOpenSSL_VERSION_STR    (\"%s\")\n" % version)
  file.write("#define CFGOpenSSL_SIMPLE_VERSION (%d)\n" % (versions[0] * 10 + versions[1]))
  file.write("#define CFGOpenSSL_FULL_VERSION   (0x%08X)\n" % (detail_version))
  file.write("\n#endif\n")
  file.close()

if __name__ == "__main__":
  main()